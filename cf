#!/usr/bin/python

"""
Configger

Merge, substitute variables, and compress multiple cloud-config
files into one.

   # Example input YAML data
   #=========================
   
   # If output-file is null, stdout will be used.
   output-file: user-data.yml
   
   variable-mapping:
     key: value
     key: value
     ...
   
   cloud-configs:
   - file.yml
   - file.yml
     ...

Environment variables (useful for troubleshooting):
  DEBUG
        Turn on debugging output.
  NOCOMPRESS
        Do not compress the merged cloud-config.

Copyright (c) 2016, Kris Feldmann
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     disclaimer in the documentation and/or other materials provided
     with the distribution.

  3. Neither the name of the copyright holder nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import sys
import os
import yaml
import gzip
import StringIO
import base64
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.encoders import encode_base64


def usage():
    sys.stderr.write("Usage: cf [-s] cloud-configs.yml\n")
    sys.stderr.write("    -s\n")
    sys.stderr.write( \
        "       The argument is a YAML string, rather than a filename.\n")
    raise SystemExit(1)

def _i(message):
    sys.stderr.write('INFO: %s\n' % message)
    return None

def _e(message):
    sys.stderr.write('ERROR: %s\n' % message)
    raise SystemExit(1)

def _w(message):
    sys.stderr.write('WARN: %s\n' % message)
    return None

def _d(message):
    if os.environ.get('DEBUG') != None:
        sys.stderr.write('DEBUG: %s\n' % message)
    return None

def __merge(src, dst):
    if isinstance(src, (dict)) and isinstance(dst, (dict)):
        for (k, v) in src.items():
            if k in dst:
                __merge(src[k], dst[k])
            else:
                dst[k] = v
    elif isinstance(src, (list)) and isinstance(dst, (list)):
        dst.extend(src)
    elif isinstance(src, (str)) and isinstance(dst, (str)):
        dst = src
    else:
        _w('Merge not handling: type(src)==%s, type(dst)==%s\n' \
          % (src, dst))
    return None

def merge_cc(cloud_config_list):
    "Returns a YAML string representing one merged cloud-config."
    if not cloud_config_list:
        return None
    merged = {}
    for ccfname in cloud_config_list:
        try:
            f = open(
              os.path.expandvars(
                os.path.expanduser(
                  ccfname)), 'r')
        except IOError:
            _e('Failed to open cloud-config file, "%s"' % ccfname)
        try:
            data = yaml.load(f)
        except Exception as ex:
            f.close()
            _e('Problem parsing cloud-config data: "%s": %s' \
               % (ccfname, str(ex)))
        f.close()
        __merge(data, merged)
    return '#cloud-config\n%%YAML 1.1\n---\n%s' % \
            yaml.dump(merged, default_flow_style=False)

def varsub(cc, vmap):
    for k in vmap.keys():
        cc = cc.replace(k, vmap[k])
    return cc

def compress2(in_data):
    _d("Starting compress2()")
    start_size = len(in_data)
    out_buf = StringIO.StringIO()
    zipper = gzip.GzipFile(None, 'wb', 9, out_buf)
    zipper.write(in_data)
    zipper.close()
    c = out_buf.getvalue()

    combined_message = MIMEMultipart()
    filename = "user-data.yml"
    format_type = "application/gzip"
    sub_message = MIMEBase("application", "gzip")
    sub_message.set_payload(c)
    encode_base64(sub_message)
    sub_message.add_header('Content-Disposition', 'attachment', filename=filename)
    combined_message.attach(sub_message)

    out_data = str(combined_message)
    end_size = len(out_data)
    _d("Input size: %d" % start_size)
    _d("Output size: %d" % end_size)
    ratio = float(end_size)/float(start_size)
    if ratio < 1.0:
        _d("Savings: %d%%" % int(100.0 - 100.0*ratio))
        return out_data
    else:
        _d("No savings. Returning unmodified input data.")
        return in_data

def main():
    if '-?' in sys.argv \
            or '-h' in sys.argv \
            or '--help' in sys.argv:
        usage()
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        usage()
    if sys.argv[1] == '-s':
        if len(sys.argv) == 3:
            cc_list_st = sys.argv[2]
            cc_list_dict = yaml.load(cc_list_st)
        else:
            usage()
    else:
        if len(sys.argv) == 2:
            fd = open(
              os.path.expandvars(
                os.path.expanduser(sys.argv[1])
              ),
              'r')
            cc_list_dict = yaml.load(fd)
            fd.close()
        else:
            usage()

    cc_list = cc_list_dict.get('cloud-configs', [])
    var_map = cc_list_dict.get('variable-mapping', {})
    out_file = cc_list_dict.get('output-file', False)

    # merge multiple cloud-config files
    cc_str = merge_cc(cc_list)
    # perform variable substitution
    cc_str = varsub(cc_str, var_map)
    # compress
    if os.environ.get('NOCOMPRESS') == None:
        cc_str = compress2(cc_str)
    # output
    if out_file:
        fd = open(
               os.path.expandvars(
                 os.path.expanduser(
                   out_file)), 'w')
        fd.write(cc_str)
        fd.close()
    else:
        print cc_str

if __name__ == "__main__":
    main()

